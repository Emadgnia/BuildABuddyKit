{"variants":[{"paths":["\/tutorials\/learningmaterial\/writing-documentation"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"Writing Documentation","chapter":"Essentials","estimatedTimeInMinutes":30,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial will guide you through building the documentation, documenting the symbols of a type, and adding images and asides to the documentation."}]}]},{"kind":"tasks","tasks":[{"anchor":"Building-the-documentation","title":"Building the documentation","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"DocC documentation is built from your source code and optionally some Markdown files."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Checkout the "},{"type":"codeVoice","code":"step-1"},{"type":"text","text":" branch in the Git repository."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"tutorial-git-step-1.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select Product > Build Documentation in the menu bar."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also press ⌃⇧⌘D to build the documentation."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":"01-writing-documentation-01-02.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A window containing the documentation should appear. Select BuildABuddyKit under “Workspace Documentation” to view your documentation."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Spend a minute browsing the documentation. Notice that all the public types in the BuildABuddyKit package are included in the documentation but none of them are accomodated by text.  This documentation is similar to when Apple’s documentation shows “No overview available”."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":"01-writing-documentation-01-03.png"}]},{"anchor":"Documenting-symbols","title":"Documenting symbols","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have built the documentation but it is lacking descriptions of symbols, such as types, properties, and functions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can use a dialect of Markdown, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"documentation markup"}]},{"type":"text","text":", to write our documentation. This dialect builds upon Markdown to add support for linking to symbols, asides, and much more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When building the documentation, the DocC compiler converts the Markdown into rich documentation."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Do not worry. You will not have to document all types in BuildABuddyKit."}]}],"type":"aside","name":"Info"}],"mediaPosition":"trailing"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Checkout the "},{"type":"codeVoice","code":"step-2"},{"type":"text","text":" branch in the Git repository."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"tutorial-git-step-2.png"},{"code":"01-writing-documentation-02-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select BuddyRenderer.swift in the Project navigator."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will add documentation to the BuddyRenderer type. This type takes an instance of Buddy as input and outputs an image."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"01-writing-documentation-02-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first line in your documentation is treated as the summary which is shown below the type name. The summary should be kept short and concise. Add a summary to the documentation."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You are encouraged to build the documentation throughout each step of this series of tutorials. This will give you a better understanding of how the changes affect the documentation."}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can copy and paste the documentation from the source code on the right-hand side."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":"01-writing-documentation-02-01.png","media":null},{"code":"01-writing-documentation-02-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an overview to the type."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lines following the summary is treated as the description. The overview can be long and detailed."}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Notice that the overview contains backticks. The overview is written in Markdown and can contain code, links, images, tables, and lists. We will have a closer look at some of these later."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":"01-writing-documentation-02-02.png","media":null},{"code":"01-writing-documentation-02-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace `Buddy` with ``Buddy`` and `render(_:)` with ``render(_:)``. This will turn the type and function into links."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Double backticks (``) are used to refer to a symbol in the documentation. You can also use the alternative syntax "},{"type":"codeVoice","code":"<doc:Buddy>"},{"type":"text","text":"."}]}],"type":"aside","name":"Info"}],"type":"step","runtimePreview":"01-writing-documentation-02-03.png","media":null},{"code":"01-writing-documentation-02-05.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a code snippet showing users how to get started with the "},{"type":"codeVoice","code":"BuddyRenderer"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":"01-writing-documentation-02-04.png","media":null},{"code":"01-writing-documentation-02-06.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a summary and a description to the two instance properties."}]}],"caption":[],"type":"step","runtimePreview":"01-writing-documentation-02-05.png","media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Place the cursor on top of the initializer. Then select Editor > Structure > Add Documentation. This will generate template documentation for the function."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also press ⌥⌘\/ to add documentation."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":"01-writing-documentation-02-06.png"},{"code":"01-writing-documentation-02-07.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After generating the documentation, you should be able to select the placeholders and fill out the summary and description of the parameters. See the next step for suggested texts."}]}],"caption":[],"type":"step","runtimePreview":"01-writing-documentation-02-07.png","media":null},{"code":"01-writing-documentation-02-08.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Document the initializer by adding a summary and a description of the parameters."}]}],"caption":[],"type":"step","runtimePreview":"01-writing-documentation-02-08.png","media":null},{"code":"01-writing-documentation-02-09.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add documentation to the "},{"type":"codeVoice","code":"render(_:)"},{"type":"text","text":" function."}]}],"caption":[],"type":"step","runtimePreview":"01-writing-documentation-02-09.png","media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, build the documentation and browse the documentation for "},{"type":"codeVoice","code":"BuddyRenderer"},{"type":"text","text":"."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Checkout the "},{"type":"codeVoice","code":"step-3"},{"type":"text","text":" branch and build the documentation to view the documentation for all symbols."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":"01-writing-documentation-02-10.png"}]},{"anchor":"Add-an-image","title":"Add an image","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will add an image to the documentation of "},{"type":"codeVoice","code":"BuddyRenderer"},{"type":"text","text":" to give adopters of the framework an idea of the output they can expect when calling "},{"type":"codeVoice","code":"-render(_:)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Images used in the documentation are stored inside a documentation catalog. The catalog is also used when enriching documentation in other wasy, such as when adding a landing page, structure, tutorials, and more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We will look into other ways of enriching the documentation later in the tutorial but for now we will use the documentation catalog to store our image."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Checkout the "},{"type":"codeVoice","code":"step-3"},{"type":"text","text":" branch in the Git repository."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"tutorial-git-step-3.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by adding the documentation catalog by right-clicking BuildABuddyKit in the Project navigator and selecting New File…"}]}],"caption":[],"type":"step","runtimePreview":null,"media":"01-writing-documentation-03-01.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Choose Documentation Catalog in the Template picker and select Next."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"01-writing-documentation-03-02.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You should see three new items in the Project navigator. There is the Documentation catalog which contains "},{"type":"codeVoice","code":"Documentation.md"},{"type":"text","text":" and a folder named "},{"type":"codeVoice","code":"Resources"},{"type":"text","text":". We will store our images in the "},{"type":"codeVoice","code":"Resources"},{"type":"text","text":" folder."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will have a closer look at the "},{"type":"codeVoice","code":"Documentation.md"},{"type":"text","text":" file in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-Structure-to-Documentation"},{"type":"text","text":" tutorial."}]}],"type":"step","runtimePreview":null,"media":"01-writing-documentation-03-03.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Download "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/simonbs\/BuildABuddyKit\/blob\/main\/Sources\/BuildABuddyKit\/Documentation.docc\/Resources\/buddyrenderer-output-example.jpeg"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/simonbs\/BuildABuddyKit\/blob\/main\/Sources\/BuildABuddyKit\/Documentation.docc\/Resources\/buddyrenderer-output-example%7Edark.jpeg"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"These are the two images that we will add to the documentation. There is one image to be used in light mode and one to be used in dark mode."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Filenames of images that are intended for dark mode should be suffixed with "},{"type":"codeVoice","code":"~dark"},{"type":"text","text":", for example "},{"type":"codeVoice","code":"xyz~dark.png"},{"type":"text","text":"."}]}],"type":"aside","name":"Info"}],"type":"step","runtimePreview":null,"media":"01-writing-documentation-03-04.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Drag the two downloaded images into the "},{"type":"codeVoice","code":"Resources"},{"type":"text","text":" folder in Xcode."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"01-writing-documentation-03-05.png"},{"code":"01-writing-documentation-02-09.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select "},{"type":"codeVoice","code":"BuddyRenderer.swift"},{"type":"text","text":" in the Project navigator."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-writing-documentation-03-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a short text informing users what the image depicts."}]}],"caption":[],"type":"step","runtimePreview":"01-writing-documentation-03-06.png","media":null},{"code":"01-writing-documentation-03-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the image using Markdown syntax."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Notice that we are not explicitly specifying the image to be used in dark mode. DocC will automatically chose whether to use the light or dark variant based on the naming scheme."}]}],"type":"aside","name":"Info"}],"type":"step","runtimePreview":"01-writing-documentation-03-07.png","media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, build the documentation to view the image in the "},{"type":"codeVoice","code":"BuddyRenderer"},{"type":"text","text":" type."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Checkout the "},{"type":"codeVoice","code":"step-4"},{"type":"text","text":" branch and build the documentation. Notice that the documentation now contains images for several types. For example, the documentation of each case in the "},{"type":"codeVoice","code":"Shirt.Front.Style"},{"type":"text","text":" enum shows a preview of the shirt style."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":"01-writing-documentation-03-08.png"}]},{"anchor":"Add-an-aside","title":"Add an aside","contentSection":[{"kind":"fullWidth","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Asides are used to get a reader’s attention and provide additional advice or warn about common errors and requisities."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section we will use asides to provide additional information about the usage of "},{"type":"codeVoice","code":"BuddyRenderer"},{"type":"text","text":"."}]}]}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Checkout the "},{"type":"codeVoice","code":"step-4"},{"type":"text","text":" branch in the Git repository."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"tutorial-git-step-4.png"},{"code":"01-writing-documentation-03-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select "},{"type":"codeVoice","code":"BuddyRenderer.swift"},{"type":"text","text":" in the Project navigator."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-writing-documentation-04-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an aside of type "},{"type":"codeVoice","code":"Note"},{"type":"text","text":" to inform users about the default canvas size used by "},{"type":"codeVoice","code":"BuddyRenderer"},{"type":"text","text":" and the benefits of using the default size."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Asides are created by starting a line with a greater-than symbol ("},{"type":"codeVoice","code":">"},{"type":"text","text":") followed by a space, the type of the aside, a colon ("},{"type":"codeVoice","code":":"},{"type":"text","text":"), and the content of the aside. Valid types of asides are "},{"type":"codeVoice","code":"Note"},{"type":"text","text":", "},{"type":"codeVoice","code":"Important"},{"type":"text","text":", "},{"type":"codeVoice","code":"Warning"},{"type":"text","text":", "},{"type":"codeVoice","code":"Tip"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Experiment"},{"type":"text","text":". Each type are stylized uniquely."}]}],"type":"step","runtimePreview":"01-writing-documentation-04-01.png","media":null},{"code":"01-writing-documentation-04-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an aside of type "},{"type":"codeVoice","code":"Warning"},{"type":"text","text":" to warn users that creating a canvas with a negative size has undefined behavior."}]}],"caption":[],"type":"step","runtimePreview":"01-writing-documentation-04-02.png","media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, build the documentation to view the asides in the "},{"type":"codeVoice","code":"BuddyRenderer"},{"type":"text","text":" type."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"01-writing-documentation-04-03.png"}]}]},{"kind":"assessments","assessments":[{"title":[{"type":"paragraph","inlineContent":[{"type":"text","text":"How can you build and view the DocC documentation from Xcode?"}]}],"content":[],"type":"multiple-choice","choices":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Selecting View > Documentation in the menu bar."}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sorry, that is not correct."}]}],"isCorrect":false},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Selecting Editor > View Documentation in the menu bar."}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Oops, that is not correct."}]}],"isCorrect":false},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Selecting Product > Build Documentation in the menu bar."}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Correct! You can also press ⌃⇧⌘D to build the documentation."}]}],"isCorrect":true}]},{"title":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Which language do we use to write documentation when using DocC?"}]}],"content":[],"type":"multiple-choice","choices":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Markdown"}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s correct! We use a custom dialect of Markdown which includes features like symbol linking, asides, and much more."}]}],"isCorrect":true},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"HTML"}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Oops, that is not correct."}]}],"isCorrect":false},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift"}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sorry, that is not correct."}]}],"isCorrect":false}]},{"title":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Can documentation of symbols contain syntax highlighted Swift code?"}]}],"content":[],"type":"multiple-choice","choices":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Yes, it can!"}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Correct! DocC documentation can contain syntax highlighted Swift code and it is a great way to get people quickly started using your types."}]}],"isCorrect":true},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"No, it cannot and that’s a bummer."}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sorry, that is not correct. Hint: The other option is correct 🙊"}]}],"isCorrect":false}]},{"title":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Which of the following syntaxes can we use linking to the documentaton of the "},{"type":"codeVoice","code":"BuddyRenderer"},{"type":"text","text":" type?"}]}],"content":[],"type":"multiple-choice","choices":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"`BuddyRenderer`"}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unfortunately, that was not correct."}]}],"isCorrect":false},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"``BuddyRenderer``"}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s correct! We can also use "},{"type":"codeVoice","code":"<doc:BuddyRenderer>"},{"type":"text","text":" to link to a symbol."}]}],"isCorrect":true},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":">BuddyRenderer<"}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sorry, that is not correct."}]}],"isCorrect":false}]},{"title":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Which of the following is a correct filename for an image that is used in dark mode?"}]}],"content":[],"type":"multiple-choice","choices":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"hero@dark.png"}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unfortunately, that was not correct."}]}],"isCorrect":false},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"hero-dark.png"}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ouch! That was not correct."}]}],"isCorrect":false},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"hero~dark.png"}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Correct! DocC will automatically use images suffixed with "},{"type":"codeVoice","code":"~dark"},{"type":"text","text":" whemn viewing the documentation in darkmode."}]}],"isCorrect":true}]},{"title":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Which of these is the correct syntax to use when adding an aside?"}]}],"content":[],"type":"multiple-choice","choices":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"! Warning: Build a Buddy is highly addictive."}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unfortunately, that was not correct."}]}],"isCorrect":false},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"> Warning: Build a Buddy is highly addictive."}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s correct! An aside is created by typing a greater-than symbol ("},{"type":"codeVoice","code":">"},{"type":"text","text":") followed by a space, the type of the aside, a colon ("},{"type":"codeVoice","code":":"},{"type":"text","text":"), and the content of the aside."}]}],"isCorrect":true},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"[Warning: Build a Buddy is highly addictive.]"}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sorry, that is not correct."}]}],"isCorrect":false}]},{"title":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Which types of asides provide a unique style when creting an aside?"}]}],"content":[],"type":"multiple-choice","choices":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note, Important, Alert, Help, and Experiment."}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unfortunately, that was not correct."}]}],"isCorrect":false},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Notice, Important, Warning, Hint, and Experiment."}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Oops, that is not correct."}]}],"isCorrect":false},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note, Important, Warning, Tip, and Experiment."}]}],"justification":[{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s correct! You can create asides of any type but other types than those listed here will fallback to the appearance of the Note type."}]}],"isCorrect":true}]}],"anchor":"Check-Your-Understanding"},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-Structure-to-Documentation","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Adding Structure to Documentation","abstract":[{"type":"text","text":"In the previous section we learned how documentation can be written for types, properties, and functions. In this tutorial we will explore how we can add structure to our documentation."}]}],"identifier":{"url":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Writing-Documentation","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Writing Documentation","categoryPathComponent":"Table-of-Contents","role":"project","category":"Learning Material"},"hierarchy":{"modules":[{"reference":"doc:\/\/LearningMaterial\/tutorials\/Table-of-Contents\/Essentials","projects":[{"reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Getting-Familiar-with-the-Project","sections":[{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Getting-Familiar-with-the-Project#Cloning-the-example-project"},{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Getting-Familiar-with-the-Project#Understand-the-project-structure"},{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Getting-Familiar-with-the-Project#Run-the-example-project"},{"kind":"assessment","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Getting-Familiar-with-the-Project#Check-Your-Understanding"}]},{"reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Writing-Documentation","sections":[{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Writing-Documentation#Building-the-documentation"},{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Writing-Documentation#Documenting-symbols"},{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Writing-Documentation#Add-an-image"},{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Writing-Documentation#Add-an-aside"},{"kind":"assessment","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Writing-Documentation#Check-Your-Understanding"}]},{"reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-Structure-to-Documentation","sections":[{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-Structure-to-Documentation#Adding-a-landing-page"},{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-Structure-to-Documentation#Adding-an-extension"},{"kind":"assessment","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-Structure-to-Documentation#Check-Your-Understanding"}]}]},{"reference":"doc:\/\/LearningMaterial\/tutorials\/Table-of-Contents\/Next-Steps","projects":[{"reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-a-Tutorial","sections":[{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-a-Tutorial#Add-the-table-of-contents"},{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-a-Tutorial#Add-a-tutorial"},{"kind":"assessment","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-a-Tutorial#Check-Your-Understanding"}]},{"reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Linking-to-Resources","sections":[{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Linking-to-Resources#Adding-the-Resources-directive"},{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Linking-to-Resources#Add-links-to-other-documentation"},{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Linking-to-Resources#Add-communication-channels"},{"kind":"task","reference":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Linking-to-Resources#Add-sample-code"}]}]}],"reference":"doc:\/\/LearningMaterial\/tutorials\/Table-of-Contents","paths":[["doc:\/\/LearningMaterial\/tutorials\/Table-of-Contents","doc:\/\/LearningMaterial\/tutorials\/Table-of-Contents\/$volume","doc:\/\/LearningMaterial\/tutorials\/Table-of-Contents\/Essentials"],["doc:\/\/LearningMaterial\/documentation\/LearningMaterial"]]},"references":{"doc://LearningMaterial/tutorials/LearningMaterial/Getting-Familiar-with-the-Project#Understand-the-project-structure":{"role":"pseudoSymbol","title":"Understand the project structure","abstract":[{"type":"text","text":"This tuturial will guide you through downloading the example project and getting familiar with it."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Getting-Familiar-with-the-Project#Understand-the-project-structure","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/getting-familiar-with-the-project#Understand-the-project-structure"},"doc://LearningMaterial/tutorials/LearningMaterial/Adding-a-Tutorial#Add-the-table-of-contents":{"role":"pseudoSymbol","title":"Add the table of contents","abstract":[{"type":"text","text":"Interactive tutorials are a great way to present your technology to readers."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-a-Tutorial#Add-the-table-of-contents","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/adding-a-tutorial#Add-the-table-of-contents"},"01-writing-documentation-02-05.swift":{"syntax":"swift","content":["import UIKit","","\/\/\/ Renders a buddy to an image.","\/\/\/","\/\/\/ The BuddyRenderer can be used to render an instance of ``Buddy`` into a UIImage. The appearance of the buddy should be configured before it is rendered.","\/\/\/","\/\/\/ Get started by creating an instance of `BuddyRenderer` by passing it a background color and a canvas size. Then call ``render(_:)`` and pass it an instance of ``Buddy`` to render an image.","\/\/\/","\/\/\/ ```swift","\/\/\/ let buddy = Buddy()","\/\/\/ let canvasSize = CGSize(width: 600, height: 600)","\/\/\/ let renderer = BuddyRenderer(backgroundColor: .systemPurple, canvasSize: canvasSize)","\/\/\/ let image = renderer.render(buddy)","\/\/\/ ```","public struct BuddyRenderer {","    public var backgroundColor: UIColor?","    public var canvasSize: CGSize","","    public init(backgroundColor: UIColor? = nil, canvasSize: CGSize = CGSize(width: 600, height: 600)) {","        self.backgroundColor = backgroundColor","        self.canvasSize = canvasSize","    }","","    public func render(_ buddy: Buddy) -> UIImage {","        let scale = CGPoint(x: canvasSize.width \/ 600, y: canvasSize.height \/ 600)","        let format = UIGraphicsImageRendererFormat()","        format.scale = 1","        format.opaque = false","        let renderer = UIGraphicsImageRenderer(size: canvasSize, format: format)","        let data = renderer.pngData { context in","            let cgContext = context.cgContext","            let rect = CGRect(origin: .zero, size: canvasSize)","            cgContext.clear(rect)","            cgContext.setFillColor(UIColor.clear.cgColor)","            cgContext.fill(rect)","            if let backgroundColor = backgroundColor {","                cgContext.setFillColor(backgroundColor.cgColor)","                cgContext.fill(rect)","            }","            for asset in buddy.assets {","                if let image = asset.image {","                    \/\/ Rotate the image and then render the rotated image. This makes it easier to transfer values from Sketch to code.","                    let transformedImage = image.flipped(asset.flipped).rotated(by: asset.rotation)","                    cgContext.saveGState()","                    cgContext.scaleBy(x: scale.x, y: scale.y)","                    transformedImage.draw(at: asset.position)","                    cgContext.restoreGState()","                }","            }","        }","        return UIImage(data: data)!","    }","}"],"fileName":"BuddyRenderer.swift","identifier":"01-writing-documentation-02-05.swift","type":"file","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}]},"01-writing-documentation-02-10.png":{"alt":"Screenshot of the documentation of BuddyRenderer.","type":"image","identifier":"01-writing-documentation-02-10.png","variants":[{"url":"\/images\/01-writing-documentation-02-10.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-02-10@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-02-10~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-02-10~dark@2x.png","traits":["2x","dark"]}]},"tutorial-git-step-1.png":{"alt":"Screenshot of Terminal showing the step-1 branch being checked out.","type":"image","identifier":"tutorial-git-step-1.png","variants":[{"url":"\/images\/tutorial-git-step-1.png","traits":["1x","light"]},{"url":"\/images\/tutorial-git-step-1@2x.png","traits":["2x","light"]},{"url":"\/images\/tutorial-git-step-1~dark.png","traits":["1x","dark"]},{"url":"\/images\/tutorial-git-step-1~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-02-07.png":{"alt":"Screenshot of the menu bar showing the Editor, Structure, and Add Documentation menu items highlighted,.","type":"image","identifier":"01-writing-documentation-02-07.png","variants":[{"url":"\/images\/01-writing-documentation-02-07.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-02-07@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-02-07~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-02-07~dark@2x.png","traits":["2x","dark"]}]},"doc://LearningMaterial/tutorials/LearningMaterial/Writing-Documentation#Add-an-image":{"role":"pseudoSymbol","title":"Add an image","abstract":[{"type":"text","text":"This tutorial will guide you through building the documentation, documenting the symbols of a type, and adding images and asides to the documentation."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Writing-Documentation#Add-an-image","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/writing-documentation#Add-an-image"},"doc://LearningMaterial/tutorials/LearningMaterial/Adding-Structure-to-Documentation#Adding-an-extension":{"role":"pseudoSymbol","title":"Adding an extension","abstract":[{"type":"text","text":"In the previous section we learned how documentation can be written for types, properties, and functions. In this tutorial we will explore how we can add structure to our documentation."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-Structure-to-Documentation#Adding-an-extension","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/adding-structure-to-documentation#Adding-an-extension"},"doc://LearningMaterial/tutorials/LearningMaterial/Linking-to-Resources#Add-communication-channels":{"role":"pseudoSymbol","title":"Add communication channels","abstract":[{"type":"text","text":"This tutorial will guide you through linking to additional resources from your documentation."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Linking-to-Resources#Add-communication-channels","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/linking-to-resources#Add-communication-channels"},"01-writing-documentation-02-05.png":{"alt":"Screenshot of the documentation of BuddyRenderer with the summary for the two instance properties highlighted.","type":"image","identifier":"01-writing-documentation-02-05.png","variants":[{"url":"\/images\/01-writing-documentation-02-05.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-02-05@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-02-05~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-02-05~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-02-09.swift":{"syntax":"swift","content":["import UIKit","","\/\/\/ Renders a buddy to an image.","\/\/\/","\/\/\/ The BuddyRenderer can be used to render an instance of ``Buddy`` into a UIImage. The appearance of the buddy should be configured before it is rendered.","\/\/\/","\/\/\/ Get started by creating an instance of `BuddyRenderer` by passing it a background color and a canvas size. Then call ``render(_:)`` and pass it an instance of ``Buddy`` to render an image.","\/\/\/","\/\/\/ ```swift","\/\/\/ let buddy = Buddy()","\/\/\/ let canvasSize = CGSize(width: 600, height: 600)","\/\/\/ let renderer = BuddyRenderer(backgroundColor: .systemPurple, canvasSize: canvasSize)","\/\/\/ let image = renderer.render(buddy)","\/\/\/ ```","public struct BuddyRenderer {","    \/\/\/ The background color of the rendered image.","    \/\/\/","    \/\/\/ Set the background color to `nil` or `UIColor.clear` to render a transparent image. Defaults to `nil`.","    public var backgroundColor: UIColor?","    \/\/\/ The size of the canvas.","    \/\/\/","    \/\/\/ The image returned by ``render(_:)`` will have this size.","    public var canvasSize: CGSize","","    \/\/\/ Creates a `BuddyRenderer` given a background color and a canvas size.","    \/\/\/ - Parameters:","    \/\/\/   - backgroundColor: The background color of the canvas. Defaults to `nil` for a transparent canvas.","    \/\/\/   - canvasSize: The size of the canvas. Defaults to 600 by 600.","    public init(backgroundColor: UIColor? = nil, canvasSize: CGSize = CGSize(width: 600, height: 600)) {","        self.backgroundColor = backgroundColor","        self.canvasSize = canvasSize","    }","","    \/\/\/ Renders the given buddy.","    \/\/\/","    \/\/\/ Takes an instance of ``Buddy`` as input and renders it to the image. The size and background color of the image is specified by ``canvasSize`` and ``backgroundColor``.","    \/\/\/","    \/\/\/ - Parameter buddy: The buddy to render.","    \/\/\/ - Returns: A UIImage representation of the rendered image.","    public func render(_ buddy: Buddy) -> UIImage {","        let scale = CGPoint(x: canvasSize.width \/ 600, y: canvasSize.height \/ 600)","        let format = UIGraphicsImageRendererFormat()","        format.scale = 1","        format.opaque = false","        let renderer = UIGraphicsImageRenderer(size: canvasSize, format: format)","        let data = renderer.pngData { context in","            let cgContext = context.cgContext","            let rect = CGRect(origin: .zero, size: canvasSize)","            cgContext.clear(rect)","            cgContext.setFillColor(UIColor.clear.cgColor)","            cgContext.fill(rect)","            if let backgroundColor = backgroundColor {","                cgContext.setFillColor(backgroundColor.cgColor)","                cgContext.fill(rect)","            }","            for asset in buddy.assets {","                if let image = asset.image {","                    \/\/ Rotate the image and then render the rotated image. This makes it easier to transfer values from Sketch to code.","                    let transformedImage = image.flipped(asset.flipped).rotated(by: asset.rotation)","                    cgContext.saveGState()","                    cgContext.scaleBy(x: scale.x, y: scale.y)","                    transformedImage.draw(at: asset.position)","                    cgContext.restoreGState()","                }","            }","        }","        return UIImage(data: data)!","    }","}"],"fileName":"BuddyRenderer.swift","identifier":"01-writing-documentation-02-09.swift","type":"file","fileType":"swift","highlights":[]},"01-writing-documentation-02-06.png":{"alt":"Screenshot of the menu bar showing the Editor, Structure, and Add Documentation menu items highlighted,.","type":"image","identifier":"01-writing-documentation-02-06.png","variants":[{"url":"\/images\/01-writing-documentation-02-06.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-02-06@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-02-06~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-02-06~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-01-03.png":{"alt":"Screenshot of the window containing the documentation with the table of contents for BuildABuddyKit highlighted.","type":"image","identifier":"01-writing-documentation-01-03.png","variants":[{"url":"\/images\/01-writing-documentation-01-03.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-01-03@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-01-03~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-01-03~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-03-05.png":{"alt":"Screenshot of Xcode showing the images being dragged into the Resources folder.","type":"image","identifier":"01-writing-documentation-03-05.png","variants":[{"url":"\/images\/01-writing-documentation-03-05.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-03-05@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-03-05~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-03-05~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-03-01.png":{"alt":"Screenshot of the Project navigator in Xcode showing BuildABuddyKit is right-clicked and with the New File... menu item highlighted.","type":"image","identifier":"01-writing-documentation-03-01.png","variants":[{"url":"\/images\/01-writing-documentation-03-01.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-03-01@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-03-01~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-03-01~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-03-08.png":{"alt":"Screenshot of the Developer Documentation showing the documentation of BuddyRenderer with the image of the character.","type":"image","identifier":"01-writing-documentation-03-08.png","variants":[{"url":"\/images\/01-writing-documentation-03-08.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-03-08@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-03-08~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-03-08~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-04-02.swift":{"syntax":"swift","content":["import UIKit","","\/\/\/ Renders a buddy to an image.","\/\/\/","\/\/\/ The BuddyRenderer can be used to render an instance of ``Buddy`` into a UIImage. The appearance of the buddy should be configured before it is rendered.","\/\/\/","\/\/\/ Get started by creating an instance of `BuddyRenderer` by passing it a background color and a canvas size. Then call ``render(_:)`` and pass it an instance of ``Buddy`` to render an image.","\/\/\/","\/\/\/ ```swift","\/\/\/ let buddy = Buddy()","\/\/\/ let canvasSize = CGSize(width: 600, height: 600)","\/\/\/ let renderer = BuddyRenderer(backgroundColor: .systemPurple, canvasSize: canvasSize)","\/\/\/ let image = renderer.render(buddy)","\/\/\/ ```","\/\/\/","\/\/\/ > Note: The default canvas size is 600 by 600. This canvas size provides for the best results.","\/\/\/","\/\/\/ Here's an image produced by an instance of `BuddyRenderer`:","\/\/\/","\/\/\/ ![](buddyrenderer-output-example.jpeg)","\/\/\/","\/\/\/ > Warning: Providing a negative canvas size has undefined behavior.","public struct BuddyRenderer {","    \/\/\/ The background color of the rendered image.","    \/\/\/","    \/\/\/ Set the background color to `nil` or `UIColor.clear` to render a transparent image. Defaults to `nil`.","    public var backgroundColor: UIColor?","    \/\/\/ The size of the canvas.","    \/\/\/","    \/\/\/ The image returned by ``render(_:)`` will have this size.","    public var canvasSize: CGSize","","    \/\/\/ Creates a `BuddyRenderer` given a background color and a canvas size.","    \/\/\/ - Parameters:","    \/\/\/   - backgroundColor: The background color of the canvas. Defaults to `nil` for a transparent canvas.","    \/\/\/   - canvasSize: The size of the canvas. Defaults to 600 by 600.","    public init(backgroundColor: UIColor? = nil, canvasSize: CGSize = CGSize(width: 600, height: 600)) {","        self.backgroundColor = backgroundColor","        self.canvasSize = canvasSize","    }","","    \/\/\/ Renders the given buddy.","    \/\/\/","    \/\/\/ Takes an instance of ``Buddy`` as input and renders it to the image. The size and background color of the image is specified by ``canvasSize`` and ``backgroundColor``.","    \/\/\/","    \/\/\/ - Parameter buddy: The buddy to render.","    \/\/\/ - Returns: A UIImage representation of the rendered image.","    public func render(_ buddy: Buddy) -> UIImage {","        let scale = CGPoint(x: canvasSize.width \/ 600, y: canvasSize.height \/ 600)","        let format = UIGraphicsImageRendererFormat()","        format.scale = 1","        format.opaque = false","        let renderer = UIGraphicsImageRenderer(size: canvasSize, format: format)","        let data = renderer.pngData { context in","            let cgContext = context.cgContext","            let rect = CGRect(origin: .zero, size: canvasSize)","            cgContext.clear(rect)","            cgContext.setFillColor(UIColor.clear.cgColor)","            cgContext.fill(rect)","            if let backgroundColor = backgroundColor {","                cgContext.setFillColor(backgroundColor.cgColor)","                cgContext.fill(rect)","            }","            for asset in buddy.assets {","                if let image = asset.image {","                    \/\/ Rotate the image and then render the rotated image. This makes it easier to transfer values from Sketch to code.","                    let transformedImage = image.flipped(asset.flipped).rotated(by: asset.rotation)","                    cgContext.saveGState()","                    cgContext.scaleBy(x: scale.x, y: scale.y)","                    transformedImage.draw(at: asset.position)","                    cgContext.restoreGState()","                }","            }","        }","        return UIImage(data: data)!","    }","}"],"fileName":"BuddyRenderer.swift","identifier":"01-writing-documentation-04-02.swift","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22}]},"01-writing-documentation-03-03.png":{"alt":"Screenshot of the Project navigator in Xcode with the Documentation catalog and the files in it highlighted.","type":"image","identifier":"01-writing-documentation-03-03.png","variants":[{"url":"\/images\/01-writing-documentation-03-03.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-03-03@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-03-03~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-03-03~dark@2x.png","traits":["2x","dark"]}]},"doc://LearningMaterial/tutorials/LearningMaterial/Adding-Structure-to-Documentation#Check-Your-Understanding":{"title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"type":"link","identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-Structure-to-Documentation#Check-Your-Understanding","url":"\/tutorials\/learningmaterial\/adding-structure-to-documentation#Check-Your-Understanding"},"doc://LearningMaterial/tutorials/LearningMaterial/Writing-Documentation#Check-Your-Understanding":{"title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"type":"link","identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Writing-Documentation#Check-Your-Understanding","url":"\/tutorials\/learningmaterial\/writing-documentation#Check-Your-Understanding"},"doc://LearningMaterial/tutorials/LearningMaterial/Getting-Familiar-with-the-Project#Cloning-the-example-project":{"role":"pseudoSymbol","title":"Cloning the example project","abstract":[{"type":"text","text":"This tuturial will guide you through downloading the example project and getting familiar with it."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Getting-Familiar-with-the-Project#Cloning-the-example-project","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/getting-familiar-with-the-project#Cloning-the-example-project"},"doc://LearningMaterial/tutorials/Table-of-Contents":{"role":"overview","title":"Learning Material","abstract":[{"type":"text","text":"This series of tutorials contains the learning material for the “Documenting your Project using DocC” classroom given at FrenchKit 22."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/Table-of-Contents","kind":"overview","type":"topic","url":"\/tutorials\/table-of-contents"},"doc://LearningMaterial/tutorials/Table-of-Contents/Essentials":{"role":"article","title":"Essentials","abstract":[],"identifier":"doc:\/\/LearningMaterial\/tutorials\/Table-of-Contents\/Essentials","kind":"article","type":"topic","url":"\/tutorials\/table-of-contents\/essentials"},"tutorial-git-step-4.png":{"alt":"Screenshot of Terminal showing the step-4 branch being checked out.","type":"image","identifier":"tutorial-git-step-4.png","variants":[{"url":"\/images\/tutorial-git-step-4.png","traits":["1x","light"]},{"url":"\/images\/tutorial-git-step-4@2x.png","traits":["2x","light"]},{"url":"\/images\/tutorial-git-step-4~dark.png","traits":["1x","dark"]},{"url":"\/images\/tutorial-git-step-4~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-03-01.swift":{"syntax":"swift","content":["import UIKit","","\/\/\/ Renders a buddy to an image.","\/\/\/","\/\/\/ The BuddyRenderer can be used to render an instance of ``Buddy`` into a UIImage. The appearance of the buddy should be configured before it is rendered.","\/\/\/","\/\/\/ Get started by creating an instance of `BuddyRenderer` by passing it a background color and a canvas size. Then call ``render(_:)`` and pass it an instance of ``Buddy`` to render an image.","\/\/\/","\/\/\/ ```swift","\/\/\/ let buddy = Buddy()","\/\/\/ let canvasSize = CGSize(width: 600, height: 600)","\/\/\/ let renderer = BuddyRenderer(backgroundColor: .systemPurple, canvasSize: canvasSize)","\/\/\/ let image = renderer.render(buddy)","\/\/\/ ```","\/\/\/","\/\/\/ Here's an image produced by an instance of `BuddyRenderer`:","public struct BuddyRenderer {","    \/\/\/ The background color of the rendered image.","    \/\/\/","    \/\/\/ Set the background color to `nil` or `UIColor.clear` to render a transparent image. Defaults to `nil`.","    public var backgroundColor: UIColor?","    \/\/\/ The size of the canvas.","    \/\/\/","    \/\/\/ The image returned by ``render(_:)`` will have this size.","    public var canvasSize: CGSize","","    \/\/\/ Creates a `BuddyRenderer` given a background color and a canvas size.","    \/\/\/ - Parameters:","    \/\/\/   - backgroundColor: The background color of the canvas. Defaults to `nil` for a transparent canvas.","    \/\/\/   - canvasSize: The size of the canvas. Defaults to 600 by 600.","    public init(backgroundColor: UIColor? = nil, canvasSize: CGSize = CGSize(width: 600, height: 600)) {","        self.backgroundColor = backgroundColor","        self.canvasSize = canvasSize","    }","","    \/\/\/ Renders the given buddy.","    \/\/\/","    \/\/\/ Takes an instance of ``Buddy`` as input and renders it to the image. The size and background color of the image is specified by ``canvasSize`` and ``backgroundColor``.","    \/\/\/","    \/\/\/ - Parameter buddy: The buddy to render.","    \/\/\/ - Returns: A UIImage representation of the rendered image.","    public func render(_ buddy: Buddy) -> UIImage {","        let scale = CGPoint(x: canvasSize.width \/ 600, y: canvasSize.height \/ 600)","        let format = UIGraphicsImageRendererFormat()","        format.scale = 1","        format.opaque = false","        let renderer = UIGraphicsImageRenderer(size: canvasSize, format: format)","        let data = renderer.pngData { context in","            let cgContext = context.cgContext","            let rect = CGRect(origin: .zero, size: canvasSize)","            cgContext.clear(rect)","            cgContext.setFillColor(UIColor.clear.cgColor)","            cgContext.fill(rect)","            if let backgroundColor = backgroundColor {","                cgContext.setFillColor(backgroundColor.cgColor)","                cgContext.fill(rect)","            }","            for asset in buddy.assets {","                if let image = asset.image {","                    \/\/ Rotate the image and then render the rotated image. This makes it easier to transfer values from Sketch to code.","                    let transformedImage = image.flipped(asset.flipped).rotated(by: asset.rotation)","                    cgContext.saveGState()","                    cgContext.scaleBy(x: scale.x, y: scale.y)","                    transformedImage.draw(at: asset.position)","                    cgContext.restoreGState()","                }","            }","        }","        return UIImage(data: data)!","    }","}"],"fileName":"BuddyRenderer.swift","identifier":"01-writing-documentation-03-01.swift","type":"file","fileType":"swift","highlights":[{"line":15},{"line":16}]},"01-writing-documentation-04-01.swift":{"syntax":"swift","content":["import UIKit","","\/\/\/ Renders a buddy to an image.","\/\/\/","\/\/\/ The BuddyRenderer can be used to render an instance of ``Buddy`` into a UIImage. The appearance of the buddy should be configured before it is rendered.","\/\/\/","\/\/\/ Get started by creating an instance of `BuddyRenderer` by passing it a background color and a canvas size. Then call ``render(_:)`` and pass it an instance of ``Buddy`` to render an image.","\/\/\/","\/\/\/ ```swift","\/\/\/ let buddy = Buddy()","\/\/\/ let canvasSize = CGSize(width: 600, height: 600)","\/\/\/ let renderer = BuddyRenderer(backgroundColor: .systemPurple, canvasSize: canvasSize)","\/\/\/ let image = renderer.render(buddy)","\/\/\/ ```","\/\/\/","\/\/\/ > Note: The default canvas size is 600 by 600. This canvas size provides for the best results.","\/\/\/","\/\/\/ Here's an image produced by an instance of `BuddyRenderer`:","\/\/\/","\/\/\/ ![](buddyrenderer-output-example.jpeg)","public struct BuddyRenderer {","    \/\/\/ The background color of the rendered image.","    \/\/\/","    \/\/\/ Set the background color to `nil` or `UIColor.clear` to render a transparent image. Defaults to `nil`.","    public var backgroundColor: UIColor?","    \/\/\/ The size of the canvas.","    \/\/\/","    \/\/\/ The image returned by ``render(_:)`` will have this size.","    public var canvasSize: CGSize","","    \/\/\/ Creates a `BuddyRenderer` given a background color and a canvas size.","    \/\/\/ - Parameters:","    \/\/\/   - backgroundColor: The background color of the canvas. Defaults to `nil` for a transparent canvas.","    \/\/\/   - canvasSize: The size of the canvas. Defaults to 600 by 600.","    public init(backgroundColor: UIColor? = nil, canvasSize: CGSize = CGSize(width: 600, height: 600)) {","        self.backgroundColor = backgroundColor","        self.canvasSize = canvasSize","    }","","    \/\/\/ Renders the given buddy.","    \/\/\/","    \/\/\/ Takes an instance of ``Buddy`` as input and renders it to the image. The size and background color of the image is specified by ``canvasSize`` and ``backgroundColor``.","    \/\/\/","    \/\/\/ - Parameter buddy: The buddy to render.","    \/\/\/ - Returns: A UIImage representation of the rendered image.","    public func render(_ buddy: Buddy) -> UIImage {","        let scale = CGPoint(x: canvasSize.width \/ 600, y: canvasSize.height \/ 600)","        let format = UIGraphicsImageRendererFormat()","        format.scale = 1","        format.opaque = false","        let renderer = UIGraphicsImageRenderer(size: canvasSize, format: format)","        let data = renderer.pngData { context in","            let cgContext = context.cgContext","            let rect = CGRect(origin: .zero, size: canvasSize)","            cgContext.clear(rect)","            cgContext.setFillColor(UIColor.clear.cgColor)","            cgContext.fill(rect)","            if let backgroundColor = backgroundColor {","                cgContext.setFillColor(backgroundColor.cgColor)","                cgContext.fill(rect)","            }","            for asset in buddy.assets {","                if let image = asset.image {","                    \/\/ Rotate the image and then render the rotated image. This makes it easier to transfer values from Sketch to code.","                    let transformedImage = image.flipped(asset.flipped).rotated(by: asset.rotation)","                    cgContext.saveGState()","                    cgContext.scaleBy(x: scale.x, y: scale.y)","                    transformedImage.draw(at: asset.position)","                    cgContext.restoreGState()","                }","            }","        }","        return UIImage(data: data)!","    }","}"],"fileName":"BuddyRenderer.swift","identifier":"01-writing-documentation-04-01.swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":17}]},"01-writing-documentation-02-03.swift":{"syntax":"swift","content":["import UIKit","","\/\/\/ Renders a buddy to an image.","\/\/\/","\/\/\/ The BuddyRenderer can be used to render an instance of `Buddy` into a UIImage. The appearance of the buddy should be configured before it is rendered.","\/\/\/","\/\/\/ Get started by creating an instance of `BuddyRenderer` by passing it a background color and a canvas size. Then call `render(_:)` and pass it an instance of `Buddy` to render an image.","public struct BuddyRenderer {","    public var backgroundColor: UIColor?","    public var canvasSize: CGSize","","    public init(backgroundColor: UIColor? = nil, canvasSize: CGSize = CGSize(width: 600, height: 600)) {","        self.backgroundColor = backgroundColor","        self.canvasSize = canvasSize","    }","","    public func render(_ buddy: Buddy) -> UIImage {","        let scale = CGPoint(x: canvasSize.width \/ 600, y: canvasSize.height \/ 600)","        let format = UIGraphicsImageRendererFormat()","        format.scale = 1","        format.opaque = false","        let renderer = UIGraphicsImageRenderer(size: canvasSize, format: format)","        let data = renderer.pngData { context in","            let cgContext = context.cgContext","            let rect = CGRect(origin: .zero, size: canvasSize)","            cgContext.clear(rect)","            cgContext.setFillColor(UIColor.clear.cgColor)","            cgContext.fill(rect)","            if let backgroundColor = backgroundColor {","                cgContext.setFillColor(backgroundColor.cgColor)","                cgContext.fill(rect)","            }","            for asset in buddy.assets {","                if let image = asset.image {","                    \/\/ Rotate the image and then render the rotated image. This makes it easier to transfer values from Sketch to code.","                    let transformedImage = image.flipped(asset.flipped).rotated(by: asset.rotation)","                    cgContext.saveGState()","                    cgContext.scaleBy(x: scale.x, y: scale.y)","                    transformedImage.draw(at: asset.position)","                    cgContext.restoreGState()","                }","            }","        }","        return UIImage(data: data)!","    }","}"],"fileName":"BuddyRenderer.swift","identifier":"01-writing-documentation-02-03.swift","type":"file","fileType":"swift","highlights":[{"line":4},{"line":5},{"line":6},{"line":7}]},"doc://LearningMaterial/tutorials/LearningMaterial/Linking-to-Resources":{"role":"project","title":"Linking to Resources","estimatedTime":"10min","abstract":[{"type":"text","text":"This tutorial will guide you through linking to additional resources from your documentation."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Linking-to-Resources","kind":"project","type":"topic","url":"\/tutorials\/learningmaterial\/linking-to-resources"},"doc://LearningMaterial/tutorials/LearningMaterial/Getting-Familiar-with-the-Project":{"role":"project","title":"Getting Familiar with the Example Project","estimatedTime":"10min","abstract":[{"type":"text","text":"This tuturial will guide you through downloading the example project and getting familiar with it."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Getting-Familiar-with-the-Project","kind":"project","type":"topic","url":"\/tutorials\/learningmaterial\/getting-familiar-with-the-project"},"01-writing-documentation-04-03.png":{"alt":"Screenshot of the Developer Documentation showing the documentation of BuddyRenderer.","type":"image","identifier":"01-writing-documentation-04-03.png","variants":[{"url":"\/images\/01-writing-documentation-04-03.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-04-03@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-04-03~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-04-03~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-02-06.swift":{"syntax":"swift","content":["import UIKit","","\/\/\/ Renders a buddy to an image.","\/\/\/","\/\/\/ The BuddyRenderer can be used to render an instance of ``Buddy`` into a UIImage. The appearance of the buddy should be configured before it is rendered.","\/\/\/","\/\/\/ Get started by creating an instance of `BuddyRenderer` by passing it a background color and a canvas size. Then call ``render(_:)`` and pass it an instance of ``Buddy`` to render an image.","\/\/\/","\/\/\/ ```swift","\/\/\/ let buddy = Buddy()","\/\/\/ let canvasSize = CGSize(width: 600, height: 600)","\/\/\/ let renderer = BuddyRenderer(backgroundColor: .systemPurple, canvasSize: canvasSize)","\/\/\/ let image = renderer.render(buddy)","\/\/\/ ```","public struct BuddyRenderer {","    \/\/\/ The background color of the rendered image.","    \/\/\/","    \/\/\/ Set the background color to `nil` or `UIColor.clear` to render a transparent image. Defaults to `nil`.","    public var backgroundColor: UIColor?","    \/\/\/ The size of the canvas.","    \/\/\/","    \/\/\/ The image returned by ``render(_:)`` will have this size.","    public var canvasSize: CGSize","","    public init(backgroundColor: UIColor? = nil, canvasSize: CGSize = CGSize(width: 600, height: 600)) {","        self.backgroundColor = backgroundColor","        self.canvasSize = canvasSize","    }","","    public func render(_ buddy: Buddy) -> UIImage {","        let scale = CGPoint(x: canvasSize.width \/ 600, y: canvasSize.height \/ 600)","        let format = UIGraphicsImageRendererFormat()","        format.scale = 1","        format.opaque = false","        let renderer = UIGraphicsImageRenderer(size: canvasSize, format: format)","        let data = renderer.pngData { context in","            let cgContext = context.cgContext","            let rect = CGRect(origin: .zero, size: canvasSize)","            cgContext.clear(rect)","            cgContext.setFillColor(UIColor.clear.cgColor)","            cgContext.fill(rect)","            if let backgroundColor = backgroundColor {","                cgContext.setFillColor(backgroundColor.cgColor)","                cgContext.fill(rect)","            }","            for asset in buddy.assets {","                if let image = asset.image {","                    \/\/ Rotate the image and then render the rotated image. This makes it easier to transfer values from Sketch to code.","                    let transformedImage = image.flipped(asset.flipped).rotated(by: asset.rotation)","                    cgContext.saveGState()","                    cgContext.scaleBy(x: scale.x, y: scale.y)","                    transformedImage.draw(at: asset.position)","                    cgContext.restoreGState()","                }","            }","        }","        return UIImage(data: data)!","    }","}"],"fileName":"BuddyRenderer.swift","identifier":"01-writing-documentation-02-06.swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":20},{"line":21},{"line":22}]},"01-writing-documentation-04-01.png":{"alt":"Screenshot of the Developer Documentation showing the documentation of BuddyRenderer with the note highlighted.","type":"image","identifier":"01-writing-documentation-04-01.png","variants":[{"url":"\/images\/01-writing-documentation-04-01.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-04-01@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-04-01~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-04-01~dark@2x.png","traits":["2x","dark"]}]},"doc://LearningMaterial/tutorials/LearningMaterial/Writing-Documentation#Documenting-symbols":{"role":"pseudoSymbol","title":"Documenting symbols","abstract":[{"type":"text","text":"This tutorial will guide you through building the documentation, documenting the symbols of a type, and adding images and asides to the documentation."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Writing-Documentation#Documenting-symbols","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/writing-documentation#Documenting-symbols"},"doc://LearningMaterial/tutorials/LearningMaterial/Adding-Structure-to-Documentation#Adding-a-landing-page":{"role":"pseudoSymbol","title":"Adding a landing page","abstract":[{"type":"text","text":"In the previous section we learned how documentation can be written for types, properties, and functions. In this tutorial we will explore how we can add structure to our documentation."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-Structure-to-Documentation#Adding-a-landing-page","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/adding-structure-to-documentation#Adding-a-landing-page"},"01-writing-documentation-02-09.png":{"alt":"Screenshot of the documentation of the render-function on BuddyRenderer.","type":"image","identifier":"01-writing-documentation-02-09.png","variants":[{"url":"\/images\/01-writing-documentation-02-09.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-02-09@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-02-09~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-02-09~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-02-04.png":{"alt":"Screenshot of the documentation of BuddyRenderer with code snippet highlighted.","type":"image","identifier":"01-writing-documentation-02-04.png","variants":[{"url":"\/images\/01-writing-documentation-02-04.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-02-04@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-02-04~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-02-04~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-03-07.png":{"alt":"Screenshot of the Developer Documentation showing the documentation of BuddyRenderer with the image of the character.","type":"image","identifier":"01-writing-documentation-03-07.png","variants":[{"url":"\/images\/01-writing-documentation-03-07.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-03-07@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-03-07~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-03-07~dark@2x.png","traits":["2x","dark"]}]},"doc://LearningMaterial/tutorials/LearningMaterial/Adding-Structure-to-Documentation":{"role":"project","title":"Adding Structure to Documentation","estimatedTime":"20min","abstract":[{"type":"text","text":"In the previous section we learned how documentation can be written for types, properties, and functions. In this tutorial we will explore how we can add structure to our documentation."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-Structure-to-Documentation","kind":"project","type":"topic","url":"\/tutorials\/learningmaterial\/adding-structure-to-documentation"},"doc://LearningMaterial/tutorials/LearningMaterial/Getting-Familiar-with-the-Project#Check-Your-Understanding":{"title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"type":"link","identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Getting-Familiar-with-the-Project#Check-Your-Understanding","url":"\/tutorials\/learningmaterial\/getting-familiar-with-the-project#Check-Your-Understanding"},"doc://LearningMaterial/tutorials/LearningMaterial/Getting-Familiar-with-the-Project#Run-the-example-project":{"role":"pseudoSymbol","title":"Run the example project","abstract":[{"type":"text","text":"This tuturial will guide you through downloading the example project and getting familiar with it."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Getting-Familiar-with-the-Project#Run-the-example-project","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/getting-familiar-with-the-project#Run-the-example-project"},"doc://LearningMaterial/tutorials/LearningMaterial/Writing-Documentation":{"role":"project","title":"Writing Documentation","estimatedTime":"30min","abstract":[{"type":"text","text":"This tutorial will guide you through building the documentation, documenting the symbols of a type, and adding images and asides to the documentation."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Writing-Documentation","kind":"project","type":"topic","url":"\/tutorials\/learningmaterial\/writing-documentation"},"doc://LearningMaterial/tutorials/LearningMaterial/Linking-to-Resources#Add-sample-code":{"role":"pseudoSymbol","title":"Add sample code","abstract":[{"type":"text","text":"This tutorial will guide you through linking to additional resources from your documentation."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Linking-to-Resources#Add-sample-code","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/linking-to-resources#Add-sample-code"},"01-writing-documentation-03-04.png":{"alt":"Screenshot Safari with github.com open and showing one of the images. The Download button on the website is highlighted.","type":"image","identifier":"01-writing-documentation-03-04.png","variants":[{"url":"\/images\/01-writing-documentation-03-04.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-03-04@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-03-04~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-03-04~dark@2x.png","traits":["2x","dark"]}]},"https://github.com/simonbs/BuildABuddyKit/blob/main/Sources/BuildABuddyKit/Documentation.docc/Resources/buddyrenderer-output-example%7Edark.jpeg":{"title":"buddyrenderer-output-example~dark.jpeg","titleInlineContent":[{"type":"text","text":"buddyrenderer-output-example~dark.jpeg"}],"type":"link","identifier":"https:\/\/github.com\/simonbs\/BuildABuddyKit\/blob\/main\/Sources\/BuildABuddyKit\/Documentation.docc\/Resources\/buddyrenderer-output-example%7Edark.jpeg","url":"https:\/\/github.com\/simonbs\/BuildABuddyKit\/blob\/main\/Sources\/BuildABuddyKit\/Documentation.docc\/Resources\/buddyrenderer-output-example%7Edark.jpeg"},"01-writing-documentation-02-07.swift":{"syntax":"swift","content":["import UIKit","","\/\/\/ Renders a buddy to an image.","\/\/\/","\/\/\/ The BuddyRenderer can be used to render an instance of ``Buddy`` into a UIImage. The appearance of the buddy should be configured before it is rendered.","\/\/\/","\/\/\/ Get started by creating an instance of `BuddyRenderer` by passing it a background color and a canvas size. Then call ``render(_:)`` and pass it an instance of ``Buddy`` to render an image.","\/\/\/","\/\/\/ ```swift","\/\/\/ let buddy = Buddy()","\/\/\/ let canvasSize = CGSize(width: 600, height: 600)","\/\/\/ let renderer = BuddyRenderer(backgroundColor: .systemPurple, canvasSize: canvasSize)","\/\/\/ let image = renderer.render(buddy)","\/\/\/ ```","public struct BuddyRenderer {","    \/\/\/ The background color of the rendered image.","    \/\/\/","    \/\/\/ Set the background color to `nil` or `UIColor.clear` to render a transparent image. Defaults to `nil`.","    public var backgroundColor: UIColor?","    \/\/\/ The size of the canvas.","    \/\/\/","    \/\/\/ The image returned by ``render(_:)`` will have this size.","    public var canvasSize: CGSize","","    \/\/\/ <#Description#>","    \/\/\/ - Parameters:","    \/\/\/   - backgroundColor: <#backgroundColor description#>","    \/\/\/   - canvasSize: <#canvasSize description#>","    public init(backgroundColor: UIColor? = nil, canvasSize: CGSize = CGSize(width: 600, height: 600)) {","        self.backgroundColor = backgroundColor","        self.canvasSize = canvasSize","    }","","    public func render(_ buddy: Buddy) -> UIImage {","        let scale = CGPoint(x: canvasSize.width \/ 600, y: canvasSize.height \/ 600)","        let format = UIGraphicsImageRendererFormat()","        format.scale = 1","        format.opaque = false","        let renderer = UIGraphicsImageRenderer(size: canvasSize, format: format)","        let data = renderer.pngData { context in","            let cgContext = context.cgContext","            let rect = CGRect(origin: .zero, size: canvasSize)","            cgContext.clear(rect)","            cgContext.setFillColor(UIColor.clear.cgColor)","            cgContext.fill(rect)","            if let backgroundColor = backgroundColor {","                cgContext.setFillColor(backgroundColor.cgColor)","                cgContext.fill(rect)","            }","            for asset in buddy.assets {","                if let image = asset.image {","                    \/\/ Rotate the image and then render the rotated image. This makes it easier to transfer values from Sketch to code.","                    let transformedImage = image.flipped(asset.flipped).rotated(by: asset.rotation)","                    cgContext.saveGState()","                    cgContext.scaleBy(x: scale.x, y: scale.y)","                    transformedImage.draw(at: asset.position)","                    cgContext.restoreGState()","                }","            }","        }","        return UIImage(data: data)!","    }","}"],"fileName":"BuddyRenderer.swift","identifier":"01-writing-documentation-02-07.swift","type":"file","fileType":"swift","highlights":[{"line":25},{"line":26},{"line":27},{"line":28}]},"doc://LearningMaterial/tutorials/LearningMaterial/Linking-to-Resources#Adding-the-Resources-directive":{"role":"pseudoSymbol","title":"Adding the Resources directive","abstract":[{"type":"text","text":"This tutorial will guide you through linking to additional resources from your documentation."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Linking-to-Resources#Adding-the-Resources-directive","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/linking-to-resources#Adding-the-Resources-directive"},"doc://LearningMaterial/tutorials/LearningMaterial/Writing-Documentation#Add-an-aside":{"role":"pseudoSymbol","title":"Add an aside","abstract":[{"type":"text","text":"This tutorial will guide you through building the documentation, documenting the symbols of a type, and adding images and asides to the documentation."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Writing-Documentation#Add-an-aside","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/writing-documentation#Add-an-aside"},"tutorial-git-step-3.png":{"alt":"Screenshot of Terminal showing the step-3 branch being checked out.","type":"image","identifier":"tutorial-git-step-3.png","variants":[{"url":"\/images\/tutorial-git-step-3.png","traits":["1x","light"]},{"url":"\/images\/tutorial-git-step-3@2x.png","traits":["2x","light"]},{"url":"\/images\/tutorial-git-step-3~dark.png","traits":["1x","dark"]},{"url":"\/images\/tutorial-git-step-3~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-02-01.swift":{"syntax":"swift","content":["import UIKit","","public struct BuddyRenderer {","    public var backgroundColor: UIColor?","    public var canvasSize: CGSize","","    public init(backgroundColor: UIColor? = nil, canvasSize: CGSize = CGSize(width: 600, height: 600)) {","        self.backgroundColor = backgroundColor","        self.canvasSize = canvasSize","    }","","    public func render(_ buddy: Buddy) -> UIImage {","        let scale = CGPoint(x: canvasSize.width \/ 600, y: canvasSize.height \/ 600)","        let format = UIGraphicsImageRendererFormat()","        format.scale = 1","        format.opaque = false","        let renderer = UIGraphicsImageRenderer(size: canvasSize, format: format)","        let data = renderer.pngData { context in","            let cgContext = context.cgContext","            let rect = CGRect(origin: .zero, size: canvasSize)","            cgContext.clear(rect)","            cgContext.setFillColor(UIColor.clear.cgColor)","            cgContext.fill(rect)","            if let backgroundColor = backgroundColor {","                cgContext.setFillColor(backgroundColor.cgColor)","                cgContext.fill(rect)","            }","            for asset in buddy.assets {","                if let image = asset.image {","                    \/\/ Rotate the image and then render the rotated image. This makes it easier to transfer values from Sketch to code.","                    let transformedImage = image.flipped(asset.flipped).rotated(by: asset.rotation)","                    cgContext.saveGState()","                    cgContext.scaleBy(x: scale.x, y: scale.y)","                    transformedImage.draw(at: asset.position)","                    cgContext.restoreGState()","                }","            }","        }","        return UIImage(data: data)!","    }","}"],"fileName":"BuddyRenderer.swift","identifier":"01-writing-documentation-02-01.swift","type":"file","fileType":"swift","highlights":[]},"01-writing-documentation-02-02.png":{"alt":"Screenshot of the documentation of BuddyRenderer with the overview highlighted.","type":"image","identifier":"01-writing-documentation-02-02.png","variants":[{"url":"\/images\/01-writing-documentation-02-02.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-02-02@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-02-02~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-02-02~dark@2x.png","traits":["2x","dark"]}]},"doc://LearningMaterial/tutorials/LearningMaterial/Adding-a-Tutorial#Check-Your-Understanding":{"title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"type":"link","identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-a-Tutorial#Check-Your-Understanding","url":"\/tutorials\/learningmaterial\/adding-a-tutorial#Check-Your-Understanding"},"01-writing-documentation-02-01.png":{"alt":"Screenshot of the documentation of BuddyRenderer with the summary highlighted.","type":"image","identifier":"01-writing-documentation-02-01.png","variants":[{"url":"\/images\/01-writing-documentation-02-01.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-02-01@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-02-01~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-02-01~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-04-02.png":{"alt":"Screenshot of the Developer Documentation showing the documentation of BuddyRenderer with the warning highlighted.","type":"image","identifier":"01-writing-documentation-04-02.png","variants":[{"url":"\/images\/01-writing-documentation-04-02.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-04-02@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-04-02~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-04-02~dark@2x.png","traits":["2x","dark"]}]},"doc://LearningMaterial/tutorials/LearningMaterial/Adding-a-Tutorial":{"role":"project","title":"Adding a Tutorial","estimatedTime":"30min","abstract":[{"type":"text","text":"Interactive tutorials are a great way to present your technology to readers."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-a-Tutorial","kind":"project","type":"topic","url":"\/tutorials\/learningmaterial\/adding-a-tutorial"},"doc://LearningMaterial/tutorials/LearningMaterial/Linking-to-Resources#Add-links-to-other-documentation":{"role":"pseudoSymbol","title":"Add links to other documentation","abstract":[{"type":"text","text":"This tutorial will guide you through linking to additional resources from your documentation."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Linking-to-Resources#Add-links-to-other-documentation","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/linking-to-resources#Add-links-to-other-documentation"},"01-writing-documentation-02-02.swift":{"syntax":"swift","content":["import UIKit","","\/\/\/ Renders a buddy to an image.","public struct BuddyRenderer {","    public var backgroundColor: UIColor?","    public var canvasSize: CGSize","","    public init(backgroundColor: UIColor? = nil, canvasSize: CGSize = CGSize(width: 600, height: 600)) {","        self.backgroundColor = backgroundColor","        self.canvasSize = canvasSize","    }","","    public func render(_ buddy: Buddy) -> UIImage {","        let scale = CGPoint(x: canvasSize.width \/ 600, y: canvasSize.height \/ 600)","        let format = UIGraphicsImageRendererFormat()","        format.scale = 1","        format.opaque = false","        let renderer = UIGraphicsImageRenderer(size: canvasSize, format: format)","        let data = renderer.pngData { context in","            let cgContext = context.cgContext","            let rect = CGRect(origin: .zero, size: canvasSize)","            cgContext.clear(rect)","            cgContext.setFillColor(UIColor.clear.cgColor)","            cgContext.fill(rect)","            if let backgroundColor = backgroundColor {","                cgContext.setFillColor(backgroundColor.cgColor)","                cgContext.fill(rect)","            }","            for asset in buddy.assets {","                if let image = asset.image {","                    \/\/ Rotate the image and then render the rotated image. This makes it easier to transfer values from Sketch to code.","                    let transformedImage = image.flipped(asset.flipped).rotated(by: asset.rotation)","                    cgContext.saveGState()","                    cgContext.scaleBy(x: scale.x, y: scale.y)","                    transformedImage.draw(at: asset.position)","                    cgContext.restoreGState()","                }","            }","        }","        return UIImage(data: data)!","    }","}"],"fileName":"BuddyRenderer.swift","identifier":"01-writing-documentation-02-02.swift","type":"file","fileType":"swift","highlights":[{"line":3}]},"doc://LearningMaterial/tutorials/LearningMaterial/Writing-Documentation#Building-the-documentation":{"role":"pseudoSymbol","title":"Building the documentation","abstract":[{"type":"text","text":"This tutorial will guide you through building the documentation, documenting the symbols of a type, and adding images and asides to the documentation."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Writing-Documentation#Building-the-documentation","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/writing-documentation#Building-the-documentation"},"doc://LearningMaterial/tutorials/LearningMaterial/Adding-a-Tutorial#Add-a-tutorial":{"role":"pseudoSymbol","title":"Add a tutorial","abstract":[{"type":"text","text":"Interactive tutorials are a great way to present your technology to readers."}],"identifier":"doc:\/\/LearningMaterial\/tutorials\/LearningMaterial\/Adding-a-Tutorial#Add-a-tutorial","kind":"section","type":"section","url":"\/tutorials\/learningmaterial\/adding-a-tutorial#Add-a-tutorial"},"01-writing-documentation-03-06.png":{"alt":"Screenshot of the Developer Documentation showing the documentation of BuddyRenderer.","type":"image","identifier":"01-writing-documentation-03-06.png","variants":[{"url":"\/images\/01-writing-documentation-03-06.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-03-06@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-03-06~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-03-06~dark@2x.png","traits":["2x","dark"]}]},"doc://LearningMaterial/tutorials/Table-of-Contents/Next-Steps":{"role":"article","title":"Next Steps","abstract":[],"identifier":"doc:\/\/LearningMaterial\/tutorials\/Table-of-Contents\/Next-Steps","kind":"article","type":"topic","url":"\/tutorials\/table-of-contents\/next-steps"},"01-writing-documentation-02-08.png":{"alt":"Screenshot of the documentation of BuddyRenderer with the summary for the initializer highlighted.","type":"image","identifier":"01-writing-documentation-02-08.png","variants":[{"url":"\/images\/01-writing-documentation-02-08.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-02-08@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-02-08~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-02-08~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-02-03.png":{"alt":"Screenshot of the documentation of BuddyRenderer with the overview highlighted.","type":"image","identifier":"01-writing-documentation-02-03.png","variants":[{"url":"\/images\/01-writing-documentation-02-03.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-02-03@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-02-03~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-02-03~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-02-04.swift":{"syntax":"swift","content":["import UIKit","","\/\/\/ Renders a buddy to an image.","\/\/\/","\/\/\/ The BuddyRenderer can be used to render an instance of ``Buddy`` into a UIImage. The appearance of the buddy should be configured before it is rendered.","\/\/\/","\/\/\/ Get started by creating an instance of `BuddyRenderer` by passing it a background color and a canvas size. Then call ``render(_:)`` and pass it an instance of ``Buddy`` to render an image.","public struct BuddyRenderer {","    public var backgroundColor: UIColor?","    public var canvasSize: CGSize","","    public init(backgroundColor: UIColor? = nil, canvasSize: CGSize = CGSize(width: 600, height: 600)) {","        self.backgroundColor = backgroundColor","        self.canvasSize = canvasSize","    }","","    public func render(_ buddy: Buddy) -> UIImage {","        let scale = CGPoint(x: canvasSize.width \/ 600, y: canvasSize.height \/ 600)","        let format = UIGraphicsImageRendererFormat()","        format.scale = 1","        format.opaque = false","        let renderer = UIGraphicsImageRenderer(size: canvasSize, format: format)","        let data = renderer.pngData { context in","            let cgContext = context.cgContext","            let rect = CGRect(origin: .zero, size: canvasSize)","            cgContext.clear(rect)","            cgContext.setFillColor(UIColor.clear.cgColor)","            cgContext.fill(rect)","            if let backgroundColor = backgroundColor {","                cgContext.setFillColor(backgroundColor.cgColor)","                cgContext.fill(rect)","            }","            for asset in buddy.assets {","                if let image = asset.image {","                    \/\/ Rotate the image and then render the rotated image. This makes it easier to transfer values from Sketch to code.","                    let transformedImage = image.flipped(asset.flipped).rotated(by: asset.rotation)","                    cgContext.saveGState()","                    cgContext.scaleBy(x: scale.x, y: scale.y)","                    transformedImage.draw(at: asset.position)","                    cgContext.restoreGState()","                }","            }","        }","        return UIImage(data: data)!","    }","}"],"fileName":"BuddyRenderer.swift","identifier":"01-writing-documentation-02-04.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":7}]},"01-writing-documentation-01-02.png":{"alt":"Screenshot of the menu bar with Product and Build Documentation highlighted.","type":"image","identifier":"01-writing-documentation-01-02.png","variants":[{"url":"\/images\/01-writing-documentation-01-02.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-01-02@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-01-02~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-01-02~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-03-02.png":{"alt":"Screenshot of the Template picker in Xcode showing Documentation Catalog and the Next button as highlighted.","type":"image","identifier":"01-writing-documentation-03-02.png","variants":[{"url":"\/images\/01-writing-documentation-03-02.png","traits":["1x","light"]},{"url":"\/images\/01-writing-documentation-03-02@2x.png","traits":["2x","light"]},{"url":"\/images\/01-writing-documentation-03-02~dark.png","traits":["1x","dark"]},{"url":"\/images\/01-writing-documentation-03-02~dark@2x.png","traits":["2x","dark"]}]},"https://github.com/simonbs/BuildABuddyKit/blob/main/Sources/BuildABuddyKit/Documentation.docc/Resources/buddyrenderer-output-example.jpeg":{"title":"buddyrenderer-output-example.jpeg","titleInlineContent":[{"type":"text","text":"buddyrenderer-output-example.jpeg"}],"type":"link","identifier":"https:\/\/github.com\/simonbs\/BuildABuddyKit\/blob\/main\/Sources\/BuildABuddyKit\/Documentation.docc\/Resources\/buddyrenderer-output-example.jpeg","url":"https:\/\/github.com\/simonbs\/BuildABuddyKit\/blob\/main\/Sources\/BuildABuddyKit\/Documentation.docc\/Resources\/buddyrenderer-output-example.jpeg"},"tutorial-git-step-2.png":{"alt":"Screenshot of Terminal showing the step-2 branch being checked out.","type":"image","identifier":"tutorial-git-step-2.png","variants":[{"url":"\/images\/tutorial-git-step-2.png","traits":["1x","light"]},{"url":"\/images\/tutorial-git-step-2@2x.png","traits":["2x","light"]},{"url":"\/images\/tutorial-git-step-2~dark.png","traits":["1x","dark"]},{"url":"\/images\/tutorial-git-step-2~dark@2x.png","traits":["2x","dark"]}]},"01-writing-documentation-02-08.swift":{"syntax":"swift","content":["import UIKit","","\/\/\/ Renders a buddy to an image.","\/\/\/","\/\/\/ The BuddyRenderer can be used to render an instance of ``Buddy`` into a UIImage. The appearance of the buddy should be configured before it is rendered.","\/\/\/","\/\/\/ Get started by creating an instance of `BuddyRenderer` by passing it a background color and a canvas size. Then call ``render(_:)`` and pass it an instance of ``Buddy`` to render an image.","\/\/\/","\/\/\/ ```swift","\/\/\/ let buddy = Buddy()","\/\/\/ let canvasSize = CGSize(width: 600, height: 600)","\/\/\/ let renderer = BuddyRenderer(backgroundColor: .systemPurple, canvasSize: canvasSize)","\/\/\/ let image = renderer.render(buddy)","\/\/\/ ```","public struct BuddyRenderer {","    \/\/\/ The background color of the rendered image.","    \/\/\/","    \/\/\/ Set the background color to `nil` or `UIColor.clear` to render a transparent image. Defaults to `nil`.","    public var backgroundColor: UIColor?","    \/\/\/ The size of the canvas.","    \/\/\/","    \/\/\/ The image returned by ``render(_:)`` will have this size.","    public var canvasSize: CGSize","","    \/\/\/ Creates a `BuddyRenderer` given a background color and a canvas size.","    \/\/\/ - Parameters:","    \/\/\/   - backgroundColor: The background color of the canvas. Defaults to `nil` for a transparent canvas.","    \/\/\/   - canvasSize: The size of the canvas. Defaults to 600 by 600.","    public init(backgroundColor: UIColor? = nil, canvasSize: CGSize = CGSize(width: 600, height: 600)) {","        self.backgroundColor = backgroundColor","        self.canvasSize = canvasSize","    }","","    public func render(_ buddy: Buddy) -> UIImage {","        let scale = CGPoint(x: canvasSize.width \/ 600, y: canvasSize.height \/ 600)","        let format = UIGraphicsImageRendererFormat()","        format.scale = 1","        format.opaque = false","        let renderer = UIGraphicsImageRenderer(size: canvasSize, format: format)","        let data = renderer.pngData { context in","            let cgContext = context.cgContext","            let rect = CGRect(origin: .zero, size: canvasSize)","            cgContext.clear(rect)","            cgContext.setFillColor(UIColor.clear.cgColor)","            cgContext.fill(rect)","            if let backgroundColor = backgroundColor {","                cgContext.setFillColor(backgroundColor.cgColor)","                cgContext.fill(rect)","            }","            for asset in buddy.assets {","                if let image = asset.image {","                    \/\/ Rotate the image and then render the rotated image. This makes it easier to transfer values from Sketch to code.","                    let transformedImage = image.flipped(asset.flipped).rotated(by: asset.rotation)","                    cgContext.saveGState()","                    cgContext.scaleBy(x: scale.x, y: scale.y)","                    transformedImage.draw(at: asset.position)","                    cgContext.restoreGState()","                }","            }","        }","        return UIImage(data: data)!","    }","}"],"fileName":"BuddyRenderer.swift","identifier":"01-writing-documentation-02-08.swift","type":"file","fileType":"swift","highlights":[{"line":25},{"line":27},{"line":28}]},"01-writing-documentation-03-02.swift":{"syntax":"swift","content":["import UIKit","","\/\/\/ Renders a buddy to an image.","\/\/\/","\/\/\/ The BuddyRenderer can be used to render an instance of ``Buddy`` into a UIImage. The appearance of the buddy should be configured before it is rendered.","\/\/\/","\/\/\/ Get started by creating an instance of `BuddyRenderer` by passing it a background color and a canvas size. Then call ``render(_:)`` and pass it an instance of ``Buddy`` to render an image.","\/\/\/","\/\/\/ ```swift","\/\/\/ let buddy = Buddy()","\/\/\/ let canvasSize = CGSize(width: 600, height: 600)","\/\/\/ let renderer = BuddyRenderer(backgroundColor: .systemPurple, canvasSize: canvasSize)","\/\/\/ let image = renderer.render(buddy)","\/\/\/ ```","\/\/\/","\/\/\/ Here's an image produced by an instance of `BuddyRenderer`:","\/\/\/","\/\/\/ ![](buddyrenderer-output-example.jpeg)","public struct BuddyRenderer {","    \/\/\/ The background color of the rendered image.","    \/\/\/","    \/\/\/ Set the background color to `nil` or `UIColor.clear` to render a transparent image. Defaults to `nil`.","    public var backgroundColor: UIColor?","    \/\/\/ The size of the canvas.","    \/\/\/","    \/\/\/ The image returned by ``render(_:)`` will have this size.","    public var canvasSize: CGSize","","    \/\/\/ Creates a `BuddyRenderer` given a background color and a canvas size.","    \/\/\/ - Parameters:","    \/\/\/   - backgroundColor: The background color of the canvas. Defaults to `nil` for a transparent canvas.","    \/\/\/   - canvasSize: The size of the canvas. Defaults to 600 by 600.","    public init(backgroundColor: UIColor? = nil, canvasSize: CGSize = CGSize(width: 600, height: 600)) {","        self.backgroundColor = backgroundColor","        self.canvasSize = canvasSize","    }","","    \/\/\/ Renders the given buddy.","    \/\/\/","    \/\/\/ Takes an instance of ``Buddy`` as input and renders it to the image. The size and background color of the image is specified by ``canvasSize`` and ``backgroundColor``.","    \/\/\/","    \/\/\/ - Parameter buddy: The buddy to render.","    \/\/\/ - Returns: A UIImage representation of the rendered image.","    public func render(_ buddy: Buddy) -> UIImage {","        let scale = CGPoint(x: canvasSize.width \/ 600, y: canvasSize.height \/ 600)","        let format = UIGraphicsImageRendererFormat()","        format.scale = 1","        format.opaque = false","        let renderer = UIGraphicsImageRenderer(size: canvasSize, format: format)","        let data = renderer.pngData { context in","            let cgContext = context.cgContext","            let rect = CGRect(origin: .zero, size: canvasSize)","            cgContext.clear(rect)","            cgContext.setFillColor(UIColor.clear.cgColor)","            cgContext.fill(rect)","            if let backgroundColor = backgroundColor {","                cgContext.setFillColor(backgroundColor.cgColor)","                cgContext.fill(rect)","            }","            for asset in buddy.assets {","                if let image = asset.image {","                    \/\/ Rotate the image and then render the rotated image. This makes it easier to transfer values from Sketch to code.","                    let transformedImage = image.flipped(asset.flipped).rotated(by: asset.rotation)","                    cgContext.saveGState()","                    cgContext.scaleBy(x: scale.x, y: scale.y)","                    transformedImage.draw(at: asset.position)","                    cgContext.restoreGState()","                }","            }","        }","        return UIImage(data: data)!","    }","}"],"fileName":"BuddyRenderer.swift","identifier":"01-writing-documentation-03-02.swift","type":"file","fileType":"swift","highlights":[]}}}