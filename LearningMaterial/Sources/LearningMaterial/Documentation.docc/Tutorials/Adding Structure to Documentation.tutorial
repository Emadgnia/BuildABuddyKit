@Tutorial(time: 20) {
    @Intro(title: "Adding Structure to Documentation") {
        In the previous section we learned how documentation can be written for types, properties, and functions. In this tutorial we will explore how we can add structure to our documentation.
        
        Apple's documentation often group symbols by their use case. For example, the [documentation for WeatherKit](https://developer.apple.com/documentation/WeatherKit) has symbols grouped into the topics "Fundamentals", "Requests", "Alerts and forecasts", and much more. This is in contrast to our documentation which currently groups symbols by their type, such as "Structures" and "Enumerations". 
        
        This tutorial will guide you through grouping symbols by their use case.
    }
        
    @Section(title: "Adding a landing page") {
        @ContentAndMedia {
            The landing page is usually the first part of your documentation that people see. It should give an overview of the functionality of your package or app. 
        }
        
        @Steps {
            @Step {
                Checkout the `step-2` branch in the Git repository.
                
                @Image(source: 01-adding-structure-to-documentation-01-01.png, alt: "Screenshot of Terminal showing the step-2 branch being checked out.")
            }

            @Step {
                Select `Documentation.md` in the Project navigator.
                
                This file resides inside the Documentation Catalog that we created in the <doc:Writing-Documentation> tutorial.
                
                @Code(name: "Documentation.md", file: 01-adding-structure-to-documentation-02-01.swift) {
                    @Image(source: 01-adding-structure-to-documentation-02-01.png, alt: "Screenshot of the editor in Xcode showing the Documentation.md file with the placeholders.")
                }
            }
            
            @Step {
                Add the title of your landing page.
                
                > Warning: For the DocC compiler to pick up your landing page, the title must be the exact same as the name of your package or app.
                
                @Code(name: "Documentation.md", file: 01-adding-structure-to-documentation-02-02.swift) {
                    @Image(source: 01-adding-structure-to-documentation-02-02.png, alt: "Screenshot of the Developer Documentation window in Xcode showing the documentation of BuildABuddyKit.")
                }
            }
            
            @Step {
                Add a short and concise summary of the framework.
                
                @Code(name: "Documentation.md", file: 01-adding-structure-to-documentation-02-03.swift) {
                    @Image(source: 01-adding-structure-to-documentation-02-03.png, alt: "Screenshot of the landing page with the summary highlighted.")
                }
            }
            
            @Step {
                Add a longer description of the framework.
                
                @Code(name: "Documentation.md", file: 01-adding-structure-to-documentation-02-04.swift) {
                    @Image(source: 01-adding-structure-to-documentation-02-04.png, alt: "Screenshot of the landing page with the description highlighted.")
                }
            }
            
            @Step {
                Add the use cases for the framework under `Topics`. There are two use cases for BuildABuddyKit: customizing a buddy and displaying it.
                
                > Info: The DocC compiler treats the `Topics` headline as a special case. Symbols, such as types, properties, and functions must be placed in the `Topics` section in order for DocC to generate proper symbol documentation.
                
                @Code(name: "Documentation.md", file: 01-adding-structure-to-documentation-02-05.swift) {
                    @Image(source: 01-adding-structure-to-documentation-02-05.png, alt: "Screenshot of the Developer Documentation window in Xcode showing the documentation of BuildABuddyKit.")
                }
            }
            
            @Step {
                Add another topic titled Essentials. This will display the most essential types for getting started with the framework.
                
                @Code(name: "Documentation.md", file: 01-adding-structure-to-documentation-02-06.swift) {
                    @Image(source: 01-adding-structure-to-documentation-02-05.png, alt: "Screenshot of the Developer Documentation window in Xcode showing the documentation of BuildABuddyKit.")
                }
            }
            
            @Step {
                Finally, add all the types under their respective section.
                
                > Info: DocC will recognize symbols between double backticks as references to symbols in the framework or app.
                
                @Code(name: "Documentation.md", file: 01-adding-structure-to-documentation-02-07.swift) {
                    @Image(source: 01-adding-structure-to-documentation-02-06.png, alt: "Screenshot of the Developer Documentation window in Xcode showing the documentation of BuildABuddyKit.")
                }
            }
        }
    }
        
    @Section(title: "Adding an extension") {
        @ContentAndMedia {
            In the previous section we added structure to the documentation by grouping topics on the landing page. In this section we will add structure by grouping symbols of a type.
            
            It may not be necessary to manually structure the symbols for all types but you may want to do it for complex types or those that play a key role in your framework or app.
            
            Markdown files that specify symbol-specific structure are  _extension files_ in DocC terms.
            
            In this section we will add an extension that improves the structure of the documentation of `BuddyRenderer`.
        }
            
        @Steps {
            @Step {
                Right-click the Documentation folder and select New Folder.
                
                @Image(source: 01-adding-structure-to-documentation-03-01.png, alt: "Screenshot of Xcode after that user has performed a right-click on the Documentation folder. The Documentation folder and the New Folder menu item are highlighted.")
            }
            
            @Step {
                Name the folder Extensions. This folder will contain the extension we are writing.
                
                > Info: It is not necessary to store extensions in a separate folder named Extensions, however, it is common practice to do so.
                
                @Image(source: 01-adding-structure-to-documentation-03-02.png, alt: "Screenshot of Xcode showing a newly created folder being renamed to Extensions.")
            }
            
            @Step {
                Right-click the Extensions folder and select New File.
                
                @Image(source: 01-adding-structure-to-documentation-03-03.png, alt: "Screenshot of Xcode after that user has performed a right-click on the Extensions folder. The Extensions folder and the New File menu item are highlighted.")
            }
            
            @Step {
                Choose Extension in the Template picker and select Next.
                
                @Image(source: 01-adding-structure-to-documentation-03-04.png, alt: "Screenshot of the Template picker in Xcode showing Extension and the Next button as highlighted.")
            }
            
            @Step {
                Name the file `BuddyRenderer.md` and select Create to save it in the Extensions folder.
                
                @Image(source: 01-adding-structure-to-documentation-03-05.png, alt: "Screenshot of the New File dialog with the filename and the Create button highlighted.")
            }
            
            @Step {
                Select `BuddyRenderer.md` in the Project navigator.
                
                @Code(name: "BuddyRenderer.md", file: 01-adding-structure-to-documentation-03-01.swift) {
                    @Image(source: 01-adding-structure-to-documentation-03-06.png, alt: "Screenshot of the BuddyRenderer.md file as shown in Xcode with the placeholders.")
                }
            }
            
            @Step {
                Replace the Symbol with the absolute path to `BuddyRenderer`. The absolute path is the target's product module name followed by the symbol name.
                
                > Important: Extensions must refer to the symbol using the absolute path.
                
                @Code(name: "BuddyRenderer.md", file: 01-adding-structure-to-documentation-03-02.swift) {
                    @Image(source: 01-adding-structure-to-documentation-03-07.png, alt: "Screenshot of the Developer Documentation window in Xcode showing the documentation for BuddyRenderer.")
                }
            }
            
            @Step {
                Remove the summary and overview as the summary and overview specified in the source file is sufficient for our needs.
                
                @Code(name: "BuddyRenderer.md", file: 01-adding-structure-to-documentation-03-03.swift) {
                    @Image(source: 01-adding-structure-to-documentation-03-07.png, alt: "Screenshot of the Developer Documentation window in Xcode showing the documentation for BuddyRenderer.")
                }
            }
            
            @Step {
                As with the landing page, start by creating the topic groups. 
                
                @Code(name: "BuddyRenderer.md", file: 01-adding-structure-to-documentation-03-04.swift) {
                    @Image(source: 01-adding-structure-to-documentation-03-07.png, alt: "Screenshot of the Developer Documentation window in Xcode showing the documentation for BuddyRenderer.")
                }
            }
            
            @Step {
                Finally, add the symbols for each topic group.
                
                @Code(name: "BuddyRenderer.md", file: 01-adding-structure-to-documentation-03-05.swift) {
                    @Image(source: 01-adding-structure-to-documentation-03-08.png, alt: "Screenshot of the Developer Documentation window in Xcode showing the documentation for BuddyRenderer.")
                }
            }
        }
    }

    @Assessments {
        @MultipleChoice {
            What do we call Markdown files that specify symbol-specific structure?
            
            @Choice(isCorrect: false) {
                Structure files.
                
                @Justification(reaction: "Try again.") {
                    Sorry, that is not correct.
                }
            }
            
            @Choice(isCorrect: true) {
                Extension files.
                
                @Justification(reaction: "Correct!") {
                    That is correct!
                }
            }
            
            @Choice(isCorrect: false) {
                Landing page files.
                
                @Justification(reaction: "Try again.") {
                    Oops, that is not correct. The landing page is the frontpage of your documentaiton.
                }
            }
        }
        
        @MultipleChoice {
            What does `BuildABuddyKit/BuddyRenderer` denote?
            
            @Choice(isCorrect: false) {
                The extension file should be used for path the landing page and the `BuddyRenderer` type.
                
                @Justification(reaction: "Try again.") {
                    Sorry, that is not correct.
                }
            }
            
            @Choice(isCorrect: false) {
                The `BuddyRenderer` type is nested under the `BuildABuddyKit` type.
                
                @Justification(reaction: "Try again.") {
                    Sorry, that is not correct.
                }
            }
            
            @Choice(isCorrect: true) {
                The absolute path of `BuddyRenderer`.
                
                @Justification(reaction: "Correct!") {
                    That is correct! We use the absolute path when adding symbol-specific structure using extension files.
                }
            }
        }
        
        @MultipleChoice {
            Should groups of symbols be placed under a specific heading of landing pages and symbol-specific extension files?
            
            @Choice(isCorrect: false) {
                No, they can be placed under any heading.
                
                @Justification(reaction: "Try again!") {
                    Oops, that is not correct. Hint: The other option is correct 🙊
                }
            }
            
            @Choice(isCorrect: true) {
                Yes, they must be placed under the Topics heading.
                
                @Justification(reaction: "Correct!") {
                    That is correct!
                }
            }
        }
    }
}
